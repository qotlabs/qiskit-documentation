{
  "scopeName": "source.qasm",
  "name": "QASM",
  "fileTypes": ["qasm"],
  "limitLineLength": true,
  "patterns": [
    {
      "comment": "Use this to explain your code",
      "name": "comment.line.double-slash",
      "match": "\\/\\/.*$"
    },
    {
      "comment": "Use this to explain your code",
      "name": "comment.line.number-sign",
      "match": "#.*$"
    },
    {
      "name": "entity.name.function",
      "comment": "function",
      "match": "^(?x)                                  # At beggining of line\n(\\.)                                  # Valid function name\n(\n  (?: [-a-zA-Z_0-9]|[^\\x00-\\x7F]     # Valid identifier characters\n    | \\\\(?:[0-9a-fA-F]{1,6}|.)       # Escape sequence\n  )+\n)                                      # Followed by either:\n(?= $                                  # - End of the line\n  | [\\s,.\\#)\\[:{>+~|]               # - Another selector\n  | #                                  # - A comment\n)"
    },
    {
      "name": "entity.name.section",
      "comment": "QASM control instructions",
      "match": "(?x)\\b(include|OPENQASM|version)\\b"
    },
    {
      "name": "variable.language",
      "comment": "qubit",
      "match": "(?x)\\b(qubit|qubits|map)\\b"
    },
    {
      "name": "constant.other",
      "comment": "index",
      "match": "(?<=(\\w\\[)|(:))( *\\d *)(?=(\\s*\\])|(:))"
    },
    {
      "name": "keyword.storage.modifier",
      "comment": "convert function",
      "match": "->"
    },
    {
      "name": "constant.string.single",
      "comment": "number",
      "match": "('.*')"
    },
    {
      "name": "constant.string.double",
      "comment": "number",
      "match": "\".*\""
    },
    {
      "name": "storage.type",
      "comment": "QASM classes",
      "match": "(?x)^\\b(?:(qreg|creg)| (gate|opaque))\\b"
    },
    {
      "name": "support.function",
      "comment": "cQASM instructions",
      "match": "(?x)\\b(?:(prep_x|prep_y|prep_z|error_model)| (measure_x|measure_y|measure_z|measure_all|measure_parity|measure)| (display|display_binary))\\b"
    },
    {
      "name": "keyword.control",
      "comment": "quantum gates",
      "match": "(?i)(?x)\\b(?:((i|h|x|y|z)| (rx|ry|rz)| (x90|y90|z90|rx90|ry90|rz90|mx90|my90|mz90)| (x180|y180|z180|rx180|ry180|rz180|mx180|my180|mz180)| (u1|u2|u3|cu1|cu2|cu3)| (s|sdag|t|tdag)| (cnot|cx|cz|cr|crk|toffoli|ccx|ccnot)| (swap) ))\\b"
    },
    {
      "name": "keyword.control",
      "comment": "binary modified quantum gates",
      "match": "(?i)(?x)\\bc-(?:((i|h|x|y|z)| (rx|ry|rz)| (x90|y90|z90|rx90|ry90|rz90|mx90|my90|mz90)| (x180|y180|z180|rx180|ry180|rz180|mx180|my180|mz180)| (u1|u2|u3)| (s|sdag|t|tdag)| (cnot|cx|cz|cr|crk|toffoli|ccx|ccnot)| (swap) ))\\b"
    },
    {
      "name": "keyword.control",
      "comment": "classical gates",
      "match": "(?i)(?x)\\b(?:(not )|(if(?=[( ])))\\b"
    },
    {
      "name": "variable.language",
      "match": "\\b(depolarizing_channel|load_state|barrier)\\b"
    }
  ]
}
